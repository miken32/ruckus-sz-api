<?php
/**
 * MduSegmentationProfileMduSegmentationProfileSummaryReviewData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PofP\SmartzoneClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Virtual SmartZone - High Scale
 *
 * This reference guide describes the public APIs supported by the Virtual SmartZone - High Scale 6.1.1. Use the RESTful API commands described in this guide as an alternative way to manage the controller and its managed APs (in addition to the web and command line interfaces).
 *
 * The version of the OpenAPI document: v11_1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PofP\SmartzoneClient\Model;

use \ArrayAccess;
use \PofP\SmartzoneClient\ObjectSerializer;

/**
 * MduSegmentationProfileMduSegmentationProfileSummaryReviewData Class Doc Comment
 *
 * @category Class
 * @package  PofP\SmartzoneClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MduSegmentationProfileMduSegmentationProfileSummaryReviewData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mduSegmentationProfile_mduSegmentationProfileSummary_reviewData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ap_group_name_list' => 'string',
        'ethernet_profile_name' => 'string',
        'ap_model_list' => 'string',
        'wlan_name_list' => 'string',
        'wlan_ssid' => 'string',
        'status' => 'string',
        'result' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ap_group_name_list' => null,
        'ethernet_profile_name' => null,
        'ap_model_list' => null,
        'wlan_name_list' => null,
        'wlan_ssid' => null,
        'status' => null,
        'result' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ap_group_name_list' => false,
		'ethernet_profile_name' => false,
		'ap_model_list' => false,
		'wlan_name_list' => false,
		'wlan_ssid' => false,
		'status' => false,
		'result' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ap_group_name_list' => 'apGroupNameList',
        'ethernet_profile_name' => 'ethernetProfileName',
        'ap_model_list' => 'apModelList',
        'wlan_name_list' => 'wlanNameList',
        'wlan_ssid' => 'wlanSsid',
        'status' => 'status',
        'result' => 'result'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ap_group_name_list' => 'setApGroupNameList',
        'ethernet_profile_name' => 'setEthernetProfileName',
        'ap_model_list' => 'setApModelList',
        'wlan_name_list' => 'setWlanNameList',
        'wlan_ssid' => 'setWlanSsid',
        'status' => 'setStatus',
        'result' => 'setResult'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ap_group_name_list' => 'getApGroupNameList',
        'ethernet_profile_name' => 'getEthernetProfileName',
        'ap_model_list' => 'getApModelList',
        'wlan_name_list' => 'getWlanNameList',
        'wlan_ssid' => 'getWlanSsid',
        'status' => 'getStatus',
        'result' => 'getResult'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ap_group_name_list', $data ?? [], null);
        $this->setIfExists('ethernet_profile_name', $data ?? [], null);
        $this->setIfExists('ap_model_list', $data ?? [], null);
        $this->setIfExists('wlan_name_list', $data ?? [], null);
        $this->setIfExists('wlan_ssid', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ap_group_name_list
     *
     * @return string|null
     */
    public function getApGroupNameList()
    {
        return $this->container['ap_group_name_list'];
    }

    /**
     * Sets ap_group_name_list
     *
     * @param string|null $ap_group_name_list ap_group_name_list
     *
     * @return self
     */
    public function setApGroupNameList($ap_group_name_list)
    {
        if (is_null($ap_group_name_list)) {
            throw new \InvalidArgumentException('non-nullable ap_group_name_list cannot be null');
        }
        $this->container['ap_group_name_list'] = $ap_group_name_list;

        return $this;
    }

    /**
     * Gets ethernet_profile_name
     *
     * @return string|null
     */
    public function getEthernetProfileName()
    {
        return $this->container['ethernet_profile_name'];
    }

    /**
     * Sets ethernet_profile_name
     *
     * @param string|null $ethernet_profile_name ethernet_profile_name
     *
     * @return self
     */
    public function setEthernetProfileName($ethernet_profile_name)
    {
        if (is_null($ethernet_profile_name)) {
            throw new \InvalidArgumentException('non-nullable ethernet_profile_name cannot be null');
        }
        $this->container['ethernet_profile_name'] = $ethernet_profile_name;

        return $this;
    }

    /**
     * Gets ap_model_list
     *
     * @return string|null
     */
    public function getApModelList()
    {
        return $this->container['ap_model_list'];
    }

    /**
     * Sets ap_model_list
     *
     * @param string|null $ap_model_list ap_model_list
     *
     * @return self
     */
    public function setApModelList($ap_model_list)
    {
        if (is_null($ap_model_list)) {
            throw new \InvalidArgumentException('non-nullable ap_model_list cannot be null');
        }
        $this->container['ap_model_list'] = $ap_model_list;

        return $this;
    }

    /**
     * Gets wlan_name_list
     *
     * @return string|null
     */
    public function getWlanNameList()
    {
        return $this->container['wlan_name_list'];
    }

    /**
     * Sets wlan_name_list
     *
     * @param string|null $wlan_name_list wlan_name_list
     *
     * @return self
     */
    public function setWlanNameList($wlan_name_list)
    {
        if (is_null($wlan_name_list)) {
            throw new \InvalidArgumentException('non-nullable wlan_name_list cannot be null');
        }
        $this->container['wlan_name_list'] = $wlan_name_list;

        return $this;
    }

    /**
     * Gets wlan_ssid
     *
     * @return string|null
     */
    public function getWlanSsid()
    {
        return $this->container['wlan_ssid'];
    }

    /**
     * Sets wlan_ssid
     *
     * @param string|null $wlan_ssid wlan_ssid
     *
     * @return self
     */
    public function setWlanSsid($wlan_ssid)
    {
        if (is_null($wlan_ssid)) {
            throw new \InvalidArgumentException('non-nullable wlan_ssid cannot be null');
        }
        $this->container['wlan_ssid'] = $wlan_ssid;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string|null $result result
     *
     * @return self
     */
    public function setResult($result)
    {
        if (is_null($result)) {
            throw new \InvalidArgumentException('non-nullable result cannot be null');
        }
        $this->container['result'] = $result;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


