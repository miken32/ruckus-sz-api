<?php
/**
 * ClientQueryQueryCriteria
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PofP\SmartzoneClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Virtual SmartZone - High Scale
 *
 * This reference guide describes the public APIs supported by the Virtual SmartZone - High Scale 6.1.1. Use the RESTful API commands described in this guide as an alternative way to manage the controller and its managed APs (in addition to the web and command line interfaces).
 *
 * The version of the OpenAPI document: v11_1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PofP\SmartzoneClient\Model;

use \ArrayAccess;
use \PofP\SmartzoneClient\ObjectSerializer;

/**
 * ClientQueryQueryCriteria Class Doc Comment
 *
 * @category Class
 * @package  PofP\SmartzoneClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ClientQueryQueryCriteria implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'clientQuery_queryCriteria';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'filters' => 'object[]',
        'extra_filters' => 'object[]',
        'extra_not_filters' => 'object[]',
        'options' => 'object',
        'extra_time_range' => 'object',
        'full_text_search' => 'object',
        'attributes' => 'string[]',
        'sort_info' => 'object',
        'page' => 'int',
        'limit' => 'int',
        'expand_domains' => 'bool',
        'criteria' => 'string',
        'query' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'filters' => null,
        'extra_filters' => null,
        'extra_not_filters' => null,
        'options' => null,
        'extra_time_range' => null,
        'full_text_search' => null,
        'attributes' => null,
        'sort_info' => null,
        'page' => null,
        'limit' => null,
        'expand_domains' => null,
        'criteria' => null,
        'query' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'filters' => false,
		'extra_filters' => false,
		'extra_not_filters' => false,
		'options' => false,
		'extra_time_range' => false,
		'full_text_search' => false,
		'attributes' => false,
		'sort_info' => false,
		'page' => false,
		'limit' => false,
		'expand_domains' => false,
		'criteria' => false,
		'query' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'filters' => 'filters',
        'extra_filters' => 'extraFilters',
        'extra_not_filters' => 'extraNotFilters',
        'options' => 'options',
        'extra_time_range' => 'extraTimeRange',
        'full_text_search' => 'fullTextSearch',
        'attributes' => 'attributes',
        'sort_info' => 'sortInfo',
        'page' => 'page',
        'limit' => 'limit',
        'expand_domains' => 'expandDomains',
        'criteria' => 'criteria',
        'query' => 'query'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'filters' => 'setFilters',
        'extra_filters' => 'setExtraFilters',
        'extra_not_filters' => 'setExtraNotFilters',
        'options' => 'setOptions',
        'extra_time_range' => 'setExtraTimeRange',
        'full_text_search' => 'setFullTextSearch',
        'attributes' => 'setAttributes',
        'sort_info' => 'setSortInfo',
        'page' => 'setPage',
        'limit' => 'setLimit',
        'expand_domains' => 'setExpandDomains',
        'criteria' => 'setCriteria',
        'query' => 'setQuery'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'filters' => 'getFilters',
        'extra_filters' => 'getExtraFilters',
        'extra_not_filters' => 'getExtraNotFilters',
        'options' => 'getOptions',
        'extra_time_range' => 'getExtraTimeRange',
        'full_text_search' => 'getFullTextSearch',
        'attributes' => 'getAttributes',
        'sort_info' => 'getSortInfo',
        'page' => 'getPage',
        'limit' => 'getLimit',
        'expand_domains' => 'getExpandDomains',
        'criteria' => 'getCriteria',
        'query' => 'getQuery'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('filters', $data ?? [], null);
        $this->setIfExists('extra_filters', $data ?? [], null);
        $this->setIfExists('extra_not_filters', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('extra_time_range', $data ?? [], null);
        $this->setIfExists('full_text_search', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('sort_info', $data ?? [], null);
        $this->setIfExists('page', $data ?? [], null);
        $this->setIfExists('limit', $data ?? [], null);
        $this->setIfExists('expand_domains', $data ?? [], null);
        $this->setIfExists('criteria', $data ?? [], null);
        $this->setIfExists('query', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['page']) && ($this->container['page'] < 1)) {
            $invalidProperties[] = "invalid value for 'page', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['limit']) && ($this->container['limit'] < 1)) {
            $invalidProperties[] = "invalid value for 'limit', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets filters
     *
     * @return object[]|null
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param object[]|null $filters Filters used to select specific resource scope
     *
     * @return self
     */
    public function setFilters($filters)
    {
        if (is_null($filters)) {
            throw new \InvalidArgumentException('non-nullable filters cannot be null');
        }
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets extra_filters
     *
     * @return object[]|null
     */
    public function getExtraFilters()
    {
        return $this->container['extra_filters'];
    }

    /**
     * Sets extra_filters
     *
     * @param object[]|null $extra_filters \"AND\" condition for multiple filters
     *
     * @return self
     */
    public function setExtraFilters($extra_filters)
    {
        if (is_null($extra_filters)) {
            throw new \InvalidArgumentException('non-nullable extra_filters cannot be null');
        }
        $this->container['extra_filters'] = $extra_filters;

        return $this;
    }

    /**
     * Gets extra_not_filters
     *
     * @return object[]|null
     */
    public function getExtraNotFilters()
    {
        return $this->container['extra_not_filters'];
    }

    /**
     * Sets extra_not_filters
     *
     * @param object[]|null $extra_not_filters \"NOT\" condition for multiple filters
     *
     * @return self
     */
    public function setExtraNotFilters($extra_not_filters)
    {
        if (is_null($extra_not_filters)) {
            throw new \InvalidArgumentException('non-nullable extra_not_filters cannot be null');
        }
        $this->container['extra_not_filters'] = $extra_not_filters;

        return $this;
    }

    /**
     * Gets options
     *
     * @return object|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param object|null $options Specified feature required information
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets extra_time_range
     *
     * @return object|null
     */
    public function getExtraTimeRange()
    {
        return $this->container['extra_time_range'];
    }

    /**
     * Sets extra_time_range
     *
     * @param object|null $extra_time_range extra_time_range
     *
     * @return self
     */
    public function setExtraTimeRange($extra_time_range)
    {
        if (is_null($extra_time_range)) {
            throw new \InvalidArgumentException('non-nullable extra_time_range cannot be null');
        }
        $this->container['extra_time_range'] = $extra_time_range;

        return $this;
    }

    /**
     * Gets full_text_search
     *
     * @return object|null
     */
    public function getFullTextSearch()
    {
        return $this->container['full_text_search'];
    }

    /**
     * Sets full_text_search
     *
     * @param object|null $full_text_search full_text_search
     *
     * @return self
     */
    public function setFullTextSearch($full_text_search)
    {
        if (is_null($full_text_search)) {
            throw new \InvalidArgumentException('non-nullable full_text_search cannot be null');
        }
        $this->container['full_text_search'] = $full_text_search;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return string[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param string[]|null $attributes Get specific columns only
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets sort_info
     *
     * @return object|null
     */
    public function getSortInfo()
    {
        return $this->container['sort_info'];
    }

    /**
     * Sets sort_info
     *
     * @param object|null $sort_info About sorting
     *
     * @return self
     */
    public function setSortInfo($sort_info)
    {
        if (is_null($sort_info)) {
            throw new \InvalidArgumentException('non-nullable sort_info cannot be null');
        }
        $this->container['sort_info'] = $sort_info;

        return $this;
    }

    /**
     * Gets page
     *
     * @return int|null
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int|null $page Page number to get
     *
     * @return self
     */
    public function setPage($page)
    {
        if (is_null($page)) {
            throw new \InvalidArgumentException('non-nullable page cannot be null');
        }

        if (($page < 1)) {
            throw new \InvalidArgumentException('invalid value for $page when calling ClientQueryQueryCriteria., must be bigger than or equal to 1.');
        }

        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|null $limit Size of one page
     *
     * @return self
     */
    public function setLimit($limit)
    {
        if (is_null($limit)) {
            throw new \InvalidArgumentException('non-nullable limit cannot be null');
        }

        if (($limit < 1)) {
            throw new \InvalidArgumentException('invalid value for $limit when calling ClientQueryQueryCriteria., must be bigger than or equal to 1.');
        }

        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets expand_domains
     *
     * @return bool|null
     */
    public function getExpandDomains()
    {
        return $this->container['expand_domains'];
    }

    /**
     * Sets expand_domains
     *
     * @param bool|null $expand_domains Whether to expand domains into sub domains/ zones or not
     *
     * @return self
     */
    public function setExpandDomains($expand_domains)
    {
        if (is_null($expand_domains)) {
            throw new \InvalidArgumentException('non-nullable expand_domains cannot be null');
        }
        $this->container['expand_domains'] = $expand_domains;

        return $this;
    }

    /**
     * Gets criteria
     *
     * @return string|null
     */
    public function getCriteria()
    {
        return $this->container['criteria'];
    }

    /**
     * Sets criteria
     *
     * @param string|null $criteria Add backward compatibility for UI framework
     *
     * @return self
     */
    public function setCriteria($criteria)
    {
        if (is_null($criteria)) {
            throw new \InvalidArgumentException('non-nullable criteria cannot be null');
        }
        $this->container['criteria'] = $criteria;

        return $this;
    }

    /**
     * Gets query
     *
     * @return string|null
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string|null $query Add backward compatibility for UI framework
     *
     * @return self
     */
    public function setQuery($query)
    {
        if (is_null($query)) {
            throw new \InvalidArgumentException('non-nullable query cannot be null');
        }
        $this->container['query'] = $query;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


