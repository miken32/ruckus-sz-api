<?php
/**
 * ProfileIkeProposal
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PofP\SmartzoneClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Virtual SmartZone - High Scale
 *
 * This reference guide describes the public APIs supported by the Virtual SmartZone - High Scale 6.1.1. Use the RESTful API commands described in this guide as an alternative way to manage the controller and its managed APs (in addition to the web and command line interfaces).
 *
 * The version of the OpenAPI document: v11_1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PofP\SmartzoneClient\Model;

use \ArrayAccess;
use \PofP\SmartzoneClient\ObjectSerializer;

/**
 * ProfileIkeProposal Class Doc Comment
 *
 * @category Class
 * @description IkeProposal based ipsec service mappings
 * @package  PofP\SmartzoneClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProfileIkeProposal implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'profile_ikeProposal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enc_alg' => 'string',
        'auth_alg' => 'string',
        'prf_alg' => 'string',
        'dh_group' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enc_alg' => null,
        'auth_alg' => null,
        'prf_alg' => null,
        'dh_group' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'enc_alg' => false,
		'auth_alg' => false,
		'prf_alg' => false,
		'dh_group' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enc_alg' => 'encAlg',
        'auth_alg' => 'authAlg',
        'prf_alg' => 'prfAlg',
        'dh_group' => 'dhGroup'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enc_alg' => 'setEncAlg',
        'auth_alg' => 'setAuthAlg',
        'prf_alg' => 'setPrfAlg',
        'dh_group' => 'setDhGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enc_alg' => 'getEncAlg',
        'auth_alg' => 'getAuthAlg',
        'prf_alg' => 'getPrfAlg',
        'dh_group' => 'getDhGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ENC_ALG_THREE_DES = 'ThreeDES';
    public const ENC_ALG_AES128 = 'AES128';
    public const ENC_ALG_AES192 = 'AES192';
    public const ENC_ALG_AES256 = 'AES256';
    public const AUTH_ALG_MD5 = 'MD5';
    public const AUTH_ALG_SHA1 = 'SHA1';
    public const AUTH_ALG_AESXCBC = 'AESXCBC';
    public const AUTH_ALG_SHA256 = 'SHA256';
    public const AUTH_ALG_SHA384 = 'SHA384';
    public const AUTH_ALG_SHA512 = 'SHA512';
    public const PRF_ALG_USE_INTEGRITY_ALG = 'UseIntegrityALG';
    public const PRF_ALG_PRF_MD5 = 'PRF_MD5';
    public const PRF_ALG_PRF_SHA1 = 'PRF_SHA1';
    public const PRF_ALG_PRF_AES_CBC = 'PRF_AES_CBC';
    public const PRF_ALG_PRF_AES_MAC = 'PRF_AES_MAC';
    public const PRF_ALG_PRF_SHA256 = 'PRF_SHA256';
    public const PRF_ALG_PRF_SHA384 = 'PRF_SHA384';
    public const PRF_ALG_PRF_SHA512 = 'PRF_SHA512';
    public const DH_GROUP_MODP768 = 'Modp768';
    public const DH_GROUP_MODP1024 = 'Modp1024';
    public const DH_GROUP_MODP1536 = 'Modp1536';
    public const DH_GROUP_MODP2048 = 'Modp2048';
    public const DH_GROUP_MODP3072 = 'Modp3072';
    public const DH_GROUP_MODP4096 = 'Modp4096';
    public const DH_GROUP_MODP6144 = 'Modp6144';
    public const DH_GROUP_MODP8192 = 'Modp8192';
    public const DH_GROUP_ECP384 = 'Ecp384';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncAlgAllowableValues()
    {
        return [
            self::ENC_ALG_THREE_DES,
            self::ENC_ALG_AES128,
            self::ENC_ALG_AES192,
            self::ENC_ALG_AES256,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthAlgAllowableValues()
    {
        return [
            self::AUTH_ALG_MD5,
            self::AUTH_ALG_SHA1,
            self::AUTH_ALG_AESXCBC,
            self::AUTH_ALG_SHA256,
            self::AUTH_ALG_SHA384,
            self::AUTH_ALG_SHA512,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrfAlgAllowableValues()
    {
        return [
            self::PRF_ALG_USE_INTEGRITY_ALG,
            self::PRF_ALG_PRF_MD5,
            self::PRF_ALG_PRF_SHA1,
            self::PRF_ALG_PRF_AES_CBC,
            self::PRF_ALG_PRF_AES_MAC,
            self::PRF_ALG_PRF_SHA256,
            self::PRF_ALG_PRF_SHA384,
            self::PRF_ALG_PRF_SHA512,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhGroupAllowableValues()
    {
        return [
            self::DH_GROUP_MODP768,
            self::DH_GROUP_MODP1024,
            self::DH_GROUP_MODP1536,
            self::DH_GROUP_MODP2048,
            self::DH_GROUP_MODP3072,
            self::DH_GROUP_MODP4096,
            self::DH_GROUP_MODP6144,
            self::DH_GROUP_MODP8192,
            self::DH_GROUP_ECP384,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('enc_alg', $data ?? [], null);
        $this->setIfExists('auth_alg', $data ?? [], null);
        $this->setIfExists('prf_alg', $data ?? [], null);
        $this->setIfExists('dh_group', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['enc_alg'] === null) {
            $invalidProperties[] = "'enc_alg' can't be null";
        }
        $allowedValues = $this->getEncAlgAllowableValues();
        if (!is_null($this->container['enc_alg']) && !in_array($this->container['enc_alg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'enc_alg', must be one of '%s'",
                $this->container['enc_alg'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['auth_alg'] === null) {
            $invalidProperties[] = "'auth_alg' can't be null";
        }
        $allowedValues = $this->getAuthAlgAllowableValues();
        if (!is_null($this->container['auth_alg']) && !in_array($this->container['auth_alg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_alg', must be one of '%s'",
                $this->container['auth_alg'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPrfAlgAllowableValues();
        if (!is_null($this->container['prf_alg']) && !in_array($this->container['prf_alg'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'prf_alg', must be one of '%s'",
                $this->container['prf_alg'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['dh_group'] === null) {
            $invalidProperties[] = "'dh_group' can't be null";
        }
        $allowedValues = $this->getDhGroupAllowableValues();
        if (!is_null($this->container['dh_group']) && !in_array($this->container['dh_group'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dh_group', must be one of '%s'",
                $this->container['dh_group'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enc_alg
     *
     * @return string
     */
    public function getEncAlg()
    {
        return $this->container['enc_alg'];
    }

    /**
     * Sets enc_alg
     *
     * @param string $enc_alg encAlg of ikeProposal Specific
     *
     * @return self
     */
    public function setEncAlg($enc_alg)
    {
        if (is_null($enc_alg)) {
            throw new \InvalidArgumentException('non-nullable enc_alg cannot be null');
        }
        $allowedValues = $this->getEncAlgAllowableValues();
        if (!in_array($enc_alg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'enc_alg', must be one of '%s'",
                    $enc_alg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['enc_alg'] = $enc_alg;

        return $this;
    }

    /**
     * Gets auth_alg
     *
     * @return string
     */
    public function getAuthAlg()
    {
        return $this->container['auth_alg'];
    }

    /**
     * Sets auth_alg
     *
     * @param string $auth_alg authAlg of ikeProposal Specific
     *
     * @return self
     */
    public function setAuthAlg($auth_alg)
    {
        if (is_null($auth_alg)) {
            throw new \InvalidArgumentException('non-nullable auth_alg cannot be null');
        }
        $allowedValues = $this->getAuthAlgAllowableValues();
        if (!in_array($auth_alg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_alg', must be one of '%s'",
                    $auth_alg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_alg'] = $auth_alg;

        return $this;
    }

    /**
     * Gets prf_alg
     *
     * @return string|null
     */
    public function getPrfAlg()
    {
        return $this->container['prf_alg'];
    }

    /**
     * Sets prf_alg
     *
     * @param string|null $prf_alg prfAlg of ikeProposal Specific
     *
     * @return self
     */
    public function setPrfAlg($prf_alg)
    {
        if (is_null($prf_alg)) {
            throw new \InvalidArgumentException('non-nullable prf_alg cannot be null');
        }
        $allowedValues = $this->getPrfAlgAllowableValues();
        if (!in_array($prf_alg, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'prf_alg', must be one of '%s'",
                    $prf_alg,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['prf_alg'] = $prf_alg;

        return $this;
    }

    /**
     * Gets dh_group
     *
     * @return string
     */
    public function getDhGroup()
    {
        return $this->container['dh_group'];
    }

    /**
     * Sets dh_group
     *
     * @param string $dh_group dhGroup of ikeProposal Specific
     *
     * @return self
     */
    public function setDhGroup($dh_group)
    {
        if (is_null($dh_group)) {
            throw new \InvalidArgumentException('non-nullable dh_group cannot be null');
        }
        $allowedValues = $this->getDhGroupAllowableValues();
        if (!in_array($dh_group, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dh_group', must be one of '%s'",
                    $dh_group,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dh_group'] = $dh_group;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


