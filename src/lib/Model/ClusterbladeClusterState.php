<?php
/**
 * ClusterbladeClusterState
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PofP\SmartzoneClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Virtual SmartZone - High Scale
 *
 * This reference guide describes the public APIs supported by the Virtual SmartZone - High Scale 6.1.1. Use the RESTful API commands described in this guide as an alternative way to manage the controller and its managed APs (in addition to the web and command line interfaces).
 *
 * The version of the OpenAPI document: v11_1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PofP\SmartzoneClient\Model;

use \ArrayAccess;
use \PofP\SmartzoneClient\ObjectSerializer;

/**
 * ClusterbladeClusterState Class Doc Comment
 *
 * @category Class
 * @package  PofP\SmartzoneClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ClusterbladeClusterState implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'clusterblade_clusterState';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cluster_name' => 'string',
        'cluster_state' => 'string',
        'cluster_role' => 'string',
        'current_node_id' => 'string',
        'current_node_name' => 'string',
        'node_state_list' => '\PofP\SmartzoneClient\Model\ClusterbladeClusterStateNodeStateListInner[]',
        'management_service_state_list' => '\PofP\SmartzoneClient\Model\ClusterbladeClusterStateManagementServiceStateListInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cluster_name' => null,
        'cluster_state' => null,
        'cluster_role' => null,
        'current_node_id' => null,
        'current_node_name' => null,
        'node_state_list' => null,
        'management_service_state_list' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cluster_name' => false,
		'cluster_state' => false,
		'cluster_role' => false,
		'current_node_id' => false,
		'current_node_name' => false,
		'node_state_list' => false,
		'management_service_state_list' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cluster_name' => 'clusterName',
        'cluster_state' => 'clusterState',
        'cluster_role' => 'clusterRole',
        'current_node_id' => 'currentNodeId',
        'current_node_name' => 'currentNodeName',
        'node_state_list' => 'nodeStateList',
        'management_service_state_list' => 'managementServiceStateList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cluster_name' => 'setClusterName',
        'cluster_state' => 'setClusterState',
        'cluster_role' => 'setClusterRole',
        'current_node_id' => 'setCurrentNodeId',
        'current_node_name' => 'setCurrentNodeName',
        'node_state_list' => 'setNodeStateList',
        'management_service_state_list' => 'setManagementServiceStateList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cluster_name' => 'getClusterName',
        'cluster_state' => 'getClusterState',
        'cluster_role' => 'getClusterRole',
        'current_node_id' => 'getCurrentNodeId',
        'current_node_name' => 'getCurrentNodeName',
        'node_state_list' => 'getNodeStateList',
        'management_service_state_list' => 'getManagementServiceStateList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CLUSTER_STATE_IN_SERVICE = 'In_Service';
    public const CLUSTER_STATE_OUT_OF_SERVICE = 'Out_Of_Service';
    public const CLUSTER_STATE_MAINTENANCE = 'Maintenance';
    public const CLUSTER_STATE_READ_ONLY = 'Read_Only';
    public const CLUSTER_STATE_NETWORK_PARTITION_SUSPECTED = 'NetworkPartitionSuspected';
    public const CLUSTER_ROLE_LEADER = 'Leader';
    public const CLUSTER_ROLE_FOLLOWER = 'Follower';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClusterStateAllowableValues()
    {
        return [
            self::CLUSTER_STATE_IN_SERVICE,
            self::CLUSTER_STATE_OUT_OF_SERVICE,
            self::CLUSTER_STATE_MAINTENANCE,
            self::CLUSTER_STATE_READ_ONLY,
            self::CLUSTER_STATE_NETWORK_PARTITION_SUSPECTED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClusterRoleAllowableValues()
    {
        return [
            self::CLUSTER_ROLE_LEADER,
            self::CLUSTER_ROLE_FOLLOWER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cluster_name', $data ?? [], null);
        $this->setIfExists('cluster_state', $data ?? [], null);
        $this->setIfExists('cluster_role', $data ?? [], null);
        $this->setIfExists('current_node_id', $data ?? [], null);
        $this->setIfExists('current_node_name', $data ?? [], null);
        $this->setIfExists('node_state_list', $data ?? [], null);
        $this->setIfExists('management_service_state_list', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getClusterStateAllowableValues();
        if (!is_null($this->container['cluster_state']) && !in_array($this->container['cluster_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cluster_state', must be one of '%s'",
                $this->container['cluster_state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getClusterRoleAllowableValues();
        if (!is_null($this->container['cluster_role']) && !in_array($this->container['cluster_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cluster_role', must be one of '%s'",
                $this->container['cluster_role'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cluster_name
     *
     * @return string|null
     */
    public function getClusterName()
    {
        return $this->container['cluster_name'];
    }

    /**
     * Sets cluster_name
     *
     * @param string|null $cluster_name cluster name
     *
     * @return self
     */
    public function setClusterName($cluster_name)
    {
        if (is_null($cluster_name)) {
            throw new \InvalidArgumentException('non-nullable cluster_name cannot be null');
        }
        $this->container['cluster_name'] = $cluster_name;

        return $this;
    }

    /**
     * Gets cluster_state
     *
     * @return string|null
     */
    public function getClusterState()
    {
        return $this->container['cluster_state'];
    }

    /**
     * Sets cluster_state
     *
     * @param string|null $cluster_state cluster state
     *
     * @return self
     */
    public function setClusterState($cluster_state)
    {
        if (is_null($cluster_state)) {
            throw new \InvalidArgumentException('non-nullable cluster_state cannot be null');
        }
        $allowedValues = $this->getClusterStateAllowableValues();
        if (!in_array($cluster_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cluster_state', must be one of '%s'",
                    $cluster_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cluster_state'] = $cluster_state;

        return $this;
    }

    /**
     * Gets cluster_role
     *
     * @return string|null
     */
    public function getClusterRole()
    {
        return $this->container['cluster_role'];
    }

    /**
     * Sets cluster_role
     *
     * @param string|null $cluster_role The cluster role of the current controller node
     *
     * @return self
     */
    public function setClusterRole($cluster_role)
    {
        if (is_null($cluster_role)) {
            throw new \InvalidArgumentException('non-nullable cluster_role cannot be null');
        }
        $allowedValues = $this->getClusterRoleAllowableValues();
        if (!in_array($cluster_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cluster_role', must be one of '%s'",
                    $cluster_role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cluster_role'] = $cluster_role;

        return $this;
    }

    /**
     * Gets current_node_id
     *
     * @return string|null
     */
    public function getCurrentNodeId()
    {
        return $this->container['current_node_id'];
    }

    /**
     * Sets current_node_id
     *
     * @param string|null $current_node_id Identifier of the current controller node
     *
     * @return self
     */
    public function setCurrentNodeId($current_node_id)
    {
        if (is_null($current_node_id)) {
            throw new \InvalidArgumentException('non-nullable current_node_id cannot be null');
        }
        $this->container['current_node_id'] = $current_node_id;

        return $this;
    }

    /**
     * Gets current_node_name
     *
     * @return string|null
     */
    public function getCurrentNodeName()
    {
        return $this->container['current_node_name'];
    }

    /**
     * Sets current_node_name
     *
     * @param string|null $current_node_name The name of the current controller node
     *
     * @return self
     */
    public function setCurrentNodeName($current_node_name)
    {
        if (is_null($current_node_name)) {
            throw new \InvalidArgumentException('non-nullable current_node_name cannot be null');
        }
        $this->container['current_node_name'] = $current_node_name;

        return $this;
    }

    /**
     * Gets node_state_list
     *
     * @return \PofP\SmartzoneClient\Model\ClusterbladeClusterStateNodeStateListInner[]|null
     */
    public function getNodeStateList()
    {
        return $this->container['node_state_list'];
    }

    /**
     * Sets node_state_list
     *
     * @param \PofP\SmartzoneClient\Model\ClusterbladeClusterStateNodeStateListInner[]|null $node_state_list node_state_list
     *
     * @return self
     */
    public function setNodeStateList($node_state_list)
    {
        if (is_null($node_state_list)) {
            throw new \InvalidArgumentException('non-nullable node_state_list cannot be null');
        }
        $this->container['node_state_list'] = $node_state_list;

        return $this;
    }

    /**
     * Gets management_service_state_list
     *
     * @return \PofP\SmartzoneClient\Model\ClusterbladeClusterStateManagementServiceStateListInner[]|null
     */
    public function getManagementServiceStateList()
    {
        return $this->container['management_service_state_list'];
    }

    /**
     * Sets management_service_state_list
     *
     * @param \PofP\SmartzoneClient\Model\ClusterbladeClusterStateManagementServiceStateListInner[]|null $management_service_state_list management_service_state_list
     *
     * @return self
     */
    public function setManagementServiceStateList($management_service_state_list)
    {
        if (is_null($management_service_state_list)) {
            throw new \InvalidArgumentException('non-nullable management_service_state_list cannot be null');
        }
        $this->container['management_service_state_list'] = $management_service_state_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


