<?php
/**
 * ProfileAdvancedOptionContent
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PofP\SmartzoneClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Virtual SmartZone - High Scale
 *
 * This reference guide describes the public APIs supported by the Virtual SmartZone - High Scale 6.1.1. Use the RESTful API commands described in this guide as an alternative way to manage the controller and its managed APs (in addition to the web and command line interfaces).
 *
 * The version of the OpenAPI document: v11_1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PofP\SmartzoneClient\Model;

use \ArrayAccess;
use \PofP\SmartzoneClient\ObjectSerializer;

/**
 * ProfileAdvancedOptionContent Class Doc Comment
 *
 * @category Class
 * @description advanced option Content
 * @package  PofP\SmartzoneClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProfileAdvancedOptionContent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'profile_advancedOptionContent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dhcp_opt43_subcode' => 'float',
        'retry_limit' => 'float',
        'replay_window' => 'float',
        'ipcomp_enable' => 'string',
        'enforce_natt' => 'string',
        'dpd_delay' => 'float',
        'keep_alive_intval' => 'float',
        'failover_retry_period' => 'float',
        'failover_retry_interval' => 'float',
        'failover_mode' => 'string',
        'failover_primary_check_interval' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dhcp_opt43_subcode' => null,
        'retry_limit' => null,
        'replay_window' => null,
        'ipcomp_enable' => null,
        'enforce_natt' => null,
        'dpd_delay' => null,
        'keep_alive_intval' => null,
        'failover_retry_period' => null,
        'failover_retry_interval' => null,
        'failover_mode' => null,
        'failover_primary_check_interval' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dhcp_opt43_subcode' => false,
		'retry_limit' => false,
		'replay_window' => false,
		'ipcomp_enable' => false,
		'enforce_natt' => false,
		'dpd_delay' => false,
		'keep_alive_intval' => false,
		'failover_retry_period' => false,
		'failover_retry_interval' => false,
		'failover_mode' => false,
		'failover_primary_check_interval' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dhcp_opt43_subcode' => 'dhcpOpt43Subcode',
        'retry_limit' => 'retryLimit',
        'replay_window' => 'replayWindow',
        'ipcomp_enable' => 'ipcompEnable',
        'enforce_natt' => 'enforceNatt',
        'dpd_delay' => 'dpdDelay',
        'keep_alive_intval' => 'keepAliveIntval',
        'failover_retry_period' => 'failoverRetryPeriod',
        'failover_retry_interval' => 'failoverRetryInterval',
        'failover_mode' => 'failoverMode',
        'failover_primary_check_interval' => 'failoverPrimaryCheckInterval'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dhcp_opt43_subcode' => 'setDhcpOpt43Subcode',
        'retry_limit' => 'setRetryLimit',
        'replay_window' => 'setReplayWindow',
        'ipcomp_enable' => 'setIpcompEnable',
        'enforce_natt' => 'setEnforceNatt',
        'dpd_delay' => 'setDpdDelay',
        'keep_alive_intval' => 'setKeepAliveIntval',
        'failover_retry_period' => 'setFailoverRetryPeriod',
        'failover_retry_interval' => 'setFailoverRetryInterval',
        'failover_mode' => 'setFailoverMode',
        'failover_primary_check_interval' => 'setFailoverPrimaryCheckInterval'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dhcp_opt43_subcode' => 'getDhcpOpt43Subcode',
        'retry_limit' => 'getRetryLimit',
        'replay_window' => 'getReplayWindow',
        'ipcomp_enable' => 'getIpcompEnable',
        'enforce_natt' => 'getEnforceNatt',
        'dpd_delay' => 'getDpdDelay',
        'keep_alive_intval' => 'getKeepAliveIntval',
        'failover_retry_period' => 'getFailoverRetryPeriod',
        'failover_retry_interval' => 'getFailoverRetryInterval',
        'failover_mode' => 'getFailoverMode',
        'failover_primary_check_interval' => 'getFailoverPrimaryCheckInterval'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const IPCOMP_ENABLE_DISABLED = 'Disabled';
    public const IPCOMP_ENABLE_ENABLED = 'Enabled';
    public const ENFORCE_NATT_DISABLED = 'Disabled';
    public const ENFORCE_NATT_ENABLED = 'Enabled';
    public const FAILOVER_MODE_NON_REVERTIVE = 'Non_Revertive';
    public const FAILOVER_MODE_REVERTIVE = 'Revertive';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpcompEnableAllowableValues()
    {
        return [
            self::IPCOMP_ENABLE_DISABLED,
            self::IPCOMP_ENABLE_ENABLED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnforceNattAllowableValues()
    {
        return [
            self::ENFORCE_NATT_DISABLED,
            self::ENFORCE_NATT_ENABLED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFailoverModeAllowableValues()
    {
        return [
            self::FAILOVER_MODE_NON_REVERTIVE,
            self::FAILOVER_MODE_REVERTIVE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('dhcp_opt43_subcode', $data ?? [], null);
        $this->setIfExists('retry_limit', $data ?? [], null);
        $this->setIfExists('replay_window', $data ?? [], null);
        $this->setIfExists('ipcomp_enable', $data ?? [], null);
        $this->setIfExists('enforce_natt', $data ?? [], null);
        $this->setIfExists('dpd_delay', $data ?? [], null);
        $this->setIfExists('keep_alive_intval', $data ?? [], null);
        $this->setIfExists('failover_retry_period', $data ?? [], null);
        $this->setIfExists('failover_retry_interval', $data ?? [], null);
        $this->setIfExists('failover_mode', $data ?? [], null);
        $this->setIfExists('failover_primary_check_interval', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIpcompEnableAllowableValues();
        if (!is_null($this->container['ipcomp_enable']) && !in_array($this->container['ipcomp_enable'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ipcomp_enable', must be one of '%s'",
                $this->container['ipcomp_enable'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEnforceNattAllowableValues();
        if (!is_null($this->container['enforce_natt']) && !in_array($this->container['enforce_natt'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'enforce_natt', must be one of '%s'",
                $this->container['enforce_natt'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFailoverModeAllowableValues();
        if (!is_null($this->container['failover_mode']) && !in_array($this->container['failover_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'failover_mode', must be one of '%s'",
                $this->container['failover_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dhcp_opt43_subcode
     *
     * @return float|null
     */
    public function getDhcpOpt43Subcode()
    {
        return $this->container['dhcp_opt43_subcode'];
    }

    /**
     * Sets dhcp_opt43_subcode
     *
     * @param float|null $dhcp_opt43_subcode dhcpOpt43Subcode of the ipsec profile
     *
     * @return self
     */
    public function setDhcpOpt43Subcode($dhcp_opt43_subcode)
    {
        if (is_null($dhcp_opt43_subcode)) {
            throw new \InvalidArgumentException('non-nullable dhcp_opt43_subcode cannot be null');
        }
        $this->container['dhcp_opt43_subcode'] = $dhcp_opt43_subcode;

        return $this;
    }

    /**
     * Gets retry_limit
     *
     * @return float|null
     */
    public function getRetryLimit()
    {
        return $this->container['retry_limit'];
    }

    /**
     * Sets retry_limit
     *
     * @param float|null $retry_limit retryLimit of the ipsec profile
     *
     * @return self
     */
    public function setRetryLimit($retry_limit)
    {
        if (is_null($retry_limit)) {
            throw new \InvalidArgumentException('non-nullable retry_limit cannot be null');
        }
        $this->container['retry_limit'] = $retry_limit;

        return $this;
    }

    /**
     * Gets replay_window
     *
     * @return float|null
     */
    public function getReplayWindow()
    {
        return $this->container['replay_window'];
    }

    /**
     * Sets replay_window
     *
     * @param float|null $replay_window replayWindow of the ipsec profile
     *
     * @return self
     */
    public function setReplayWindow($replay_window)
    {
        if (is_null($replay_window)) {
            throw new \InvalidArgumentException('non-nullable replay_window cannot be null');
        }
        $this->container['replay_window'] = $replay_window;

        return $this;
    }

    /**
     * Gets ipcomp_enable
     *
     * @return string|null
     */
    public function getIpcompEnable()
    {
        return $this->container['ipcomp_enable'];
    }

    /**
     * Sets ipcomp_enable
     *
     * @param string|null $ipcomp_enable ipcomp Enable of the ipsec profile
     *
     * @return self
     */
    public function setIpcompEnable($ipcomp_enable)
    {
        if (is_null($ipcomp_enable)) {
            throw new \InvalidArgumentException('non-nullable ipcomp_enable cannot be null');
        }
        $allowedValues = $this->getIpcompEnableAllowableValues();
        if (!in_array($ipcomp_enable, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ipcomp_enable', must be one of '%s'",
                    $ipcomp_enable,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ipcomp_enable'] = $ipcomp_enable;

        return $this;
    }

    /**
     * Gets enforce_natt
     *
     * @return string|null
     */
    public function getEnforceNatt()
    {
        return $this->container['enforce_natt'];
    }

    /**
     * Sets enforce_natt
     *
     * @param string|null $enforce_natt enforceNatt Enable of the ipsec profile
     *
     * @return self
     */
    public function setEnforceNatt($enforce_natt)
    {
        if (is_null($enforce_natt)) {
            throw new \InvalidArgumentException('non-nullable enforce_natt cannot be null');
        }
        $allowedValues = $this->getEnforceNattAllowableValues();
        if (!in_array($enforce_natt, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'enforce_natt', must be one of '%s'",
                    $enforce_natt,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['enforce_natt'] = $enforce_natt;

        return $this;
    }

    /**
     * Gets dpd_delay
     *
     * @return float|null
     */
    public function getDpdDelay()
    {
        return $this->container['dpd_delay'];
    }

    /**
     * Sets dpd_delay
     *
     * @param float|null $dpd_delay dpdDelay of the ipsec profile
     *
     * @return self
     */
    public function setDpdDelay($dpd_delay)
    {
        if (is_null($dpd_delay)) {
            throw new \InvalidArgumentException('non-nullable dpd_delay cannot be null');
        }
        $this->container['dpd_delay'] = $dpd_delay;

        return $this;
    }

    /**
     * Gets keep_alive_intval
     *
     * @return float|null
     */
    public function getKeepAliveIntval()
    {
        return $this->container['keep_alive_intval'];
    }

    /**
     * Sets keep_alive_intval
     *
     * @param float|null $keep_alive_intval keepAliveIntval of the ipsec profile
     *
     * @return self
     */
    public function setKeepAliveIntval($keep_alive_intval)
    {
        if (is_null($keep_alive_intval)) {
            throw new \InvalidArgumentException('non-nullable keep_alive_intval cannot be null');
        }
        $this->container['keep_alive_intval'] = $keep_alive_intval;

        return $this;
    }

    /**
     * Gets failover_retry_period
     *
     * @return float|null
     */
    public function getFailoverRetryPeriod()
    {
        return $this->container['failover_retry_period'];
    }

    /**
     * Sets failover_retry_period
     *
     * @param float|null $failover_retry_period Retry Period of the failover
     *
     * @return self
     */
    public function setFailoverRetryPeriod($failover_retry_period)
    {
        if (is_null($failover_retry_period)) {
            throw new \InvalidArgumentException('non-nullable failover_retry_period cannot be null');
        }
        $this->container['failover_retry_period'] = $failover_retry_period;

        return $this;
    }

    /**
     * Gets failover_retry_interval
     *
     * @return float|null
     */
    public function getFailoverRetryInterval()
    {
        return $this->container['failover_retry_interval'];
    }

    /**
     * Sets failover_retry_interval
     *
     * @param float|null $failover_retry_interval Retry Interval of the failover
     *
     * @return self
     */
    public function setFailoverRetryInterval($failover_retry_interval)
    {
        if (is_null($failover_retry_interval)) {
            throw new \InvalidArgumentException('non-nullable failover_retry_interval cannot be null');
        }
        $this->container['failover_retry_interval'] = $failover_retry_interval;

        return $this;
    }

    /**
     * Gets failover_mode
     *
     * @return string|null
     */
    public function getFailoverMode()
    {
        return $this->container['failover_mode'];
    }

    /**
     * Sets failover_mode
     *
     * @param string|null $failover_mode mode of the failover
     *
     * @return self
     */
    public function setFailoverMode($failover_mode)
    {
        if (is_null($failover_mode)) {
            throw new \InvalidArgumentException('non-nullable failover_mode cannot be null');
        }
        $allowedValues = $this->getFailoverModeAllowableValues();
        if (!in_array($failover_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'failover_mode', must be one of '%s'",
                    $failover_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['failover_mode'] = $failover_mode;

        return $this;
    }

    /**
     * Gets failover_primary_check_interval
     *
     * @return float|null
     */
    public function getFailoverPrimaryCheckInterval()
    {
        return $this->container['failover_primary_check_interval'];
    }

    /**
     * Sets failover_primary_check_interval
     *
     * @param float|null $failover_primary_check_interval Primary Check Interval of the failover
     *
     * @return self
     */
    public function setFailoverPrimaryCheckInterval($failover_primary_check_interval)
    {
        if (is_null($failover_primary_check_interval)) {
            throw new \InvalidArgumentException('non-nullable failover_primary_check_interval cannot be null');
        }
        $this->container['failover_primary_check_interval'] = $failover_primary_check_interval;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


