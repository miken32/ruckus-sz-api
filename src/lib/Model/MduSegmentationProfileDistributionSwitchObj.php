<?php
/**
 * MduSegmentationProfileDistributionSwitchObj
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PofP\SmartzoneClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Virtual SmartZone - High Scale
 *
 * This reference guide describes the public APIs supported by the Virtual SmartZone - High Scale 6.1.1. Use the RESTful API commands described in this guide as an alternative way to manage the controller and its managed APs (in addition to the web and command line interfaces).
 *
 * The version of the OpenAPI document: v11_1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PofP\SmartzoneClient\Model;

use \ArrayAccess;
use \PofP\SmartzoneClient\ObjectSerializer;

/**
 * MduSegmentationProfileDistributionSwitchObj Class Doc Comment
 *
 * @category Class
 * @package  PofP\SmartzoneClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MduSegmentationProfileDistributionSwitchObj implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mduSegmentationProfile_distributionSwitchObj';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'site_name' => 'string',
        'vlan_list' => 'string',
        'loopback_interface_id' => 'string',
        'loopback_interface_ip_address' => 'string',
        'loopback_interface_subnet_mask' => 'string',
        'site_secondary_list' => 'object[]',
        'site_keep_alive' => 'string',
        'site_retry' => 'string',
        'dispatch_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'site_name' => null,
        'vlan_list' => null,
        'loopback_interface_id' => null,
        'loopback_interface_ip_address' => null,
        'loopback_interface_subnet_mask' => null,
        'site_secondary_list' => null,
        'site_keep_alive' => null,
        'site_retry' => null,
        'dispatch_message' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'site_name' => false,
		'vlan_list' => false,
		'loopback_interface_id' => false,
		'loopback_interface_ip_address' => false,
		'loopback_interface_subnet_mask' => false,
		'site_secondary_list' => false,
		'site_keep_alive' => false,
		'site_retry' => false,
		'dispatch_message' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'site_name' => 'siteName',
        'vlan_list' => 'vlanList',
        'loopback_interface_id' => 'loopbackInterfaceId',
        'loopback_interface_ip_address' => 'loopbackInterfaceIpAddress',
        'loopback_interface_subnet_mask' => 'loopbackInterfaceSubnetMask',
        'site_secondary_list' => 'siteSecondaryList',
        'site_keep_alive' => 'siteKeepAlive',
        'site_retry' => 'siteRetry',
        'dispatch_message' => 'dispatchMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'site_name' => 'setSiteName',
        'vlan_list' => 'setVlanList',
        'loopback_interface_id' => 'setLoopbackInterfaceId',
        'loopback_interface_ip_address' => 'setLoopbackInterfaceIpAddress',
        'loopback_interface_subnet_mask' => 'setLoopbackInterfaceSubnetMask',
        'site_secondary_list' => 'setSiteSecondaryList',
        'site_keep_alive' => 'setSiteKeepAlive',
        'site_retry' => 'setSiteRetry',
        'dispatch_message' => 'setDispatchMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'site_name' => 'getSiteName',
        'vlan_list' => 'getVlanList',
        'loopback_interface_id' => 'getLoopbackInterfaceId',
        'loopback_interface_ip_address' => 'getLoopbackInterfaceIpAddress',
        'loopback_interface_subnet_mask' => 'getLoopbackInterfaceSubnetMask',
        'site_secondary_list' => 'getSiteSecondaryList',
        'site_keep_alive' => 'getSiteKeepAlive',
        'site_retry' => 'getSiteRetry',
        'dispatch_message' => 'getDispatchMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('site_name', $data ?? [], null);
        $this->setIfExists('vlan_list', $data ?? [], null);
        $this->setIfExists('loopback_interface_id', $data ?? [], null);
        $this->setIfExists('loopback_interface_ip_address', $data ?? [], null);
        $this->setIfExists('loopback_interface_subnet_mask', $data ?? [], null);
        $this->setIfExists('site_secondary_list', $data ?? [], null);
        $this->setIfExists('site_keep_alive', $data ?? [], null);
        $this->setIfExists('site_retry', $data ?? [], null);
        $this->setIfExists('dispatch_message', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Distribution Switch Id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Distribution Switch Name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets site_name
     *
     * @return string|null
     */
    public function getSiteName()
    {
        return $this->container['site_name'];
    }

    /**
     * Sets site_name
     *
     * @param string|null $site_name Distribution Switch site name
     *
     * @return self
     */
    public function setSiteName($site_name)
    {
        if (is_null($site_name)) {
            throw new \InvalidArgumentException('non-nullable site_name cannot be null');
        }
        $this->container['site_name'] = $site_name;

        return $this;
    }

    /**
     * Gets vlan_list
     *
     * @return string|null
     */
    public function getVlanList()
    {
        return $this->container['vlan_list'];
    }

    /**
     * Sets vlan_list
     *
     * @param string|null $vlan_list Distribution Switch's available VLANs to Network Segmentation
     *
     * @return self
     */
    public function setVlanList($vlan_list)
    {
        if (is_null($vlan_list)) {
            throw new \InvalidArgumentException('non-nullable vlan_list cannot be null');
        }
        $this->container['vlan_list'] = $vlan_list;

        return $this;
    }

    /**
     * Gets loopback_interface_id
     *
     * @return string|null
     */
    public function getLoopbackInterfaceId()
    {
        return $this->container['loopback_interface_id'];
    }

    /**
     * Sets loopback_interface_id
     *
     * @param string|null $loopback_interface_id Distribution Switch loopback interface id
     *
     * @return self
     */
    public function setLoopbackInterfaceId($loopback_interface_id)
    {
        if (is_null($loopback_interface_id)) {
            throw new \InvalidArgumentException('non-nullable loopback_interface_id cannot be null');
        }
        $this->container['loopback_interface_id'] = $loopback_interface_id;

        return $this;
    }

    /**
     * Gets loopback_interface_ip_address
     *
     * @return string|null
     */
    public function getLoopbackInterfaceIpAddress()
    {
        return $this->container['loopback_interface_ip_address'];
    }

    /**
     * Sets loopback_interface_ip_address
     *
     * @param string|null $loopback_interface_ip_address Distribution Switch loopback interface IP address
     *
     * @return self
     */
    public function setLoopbackInterfaceIpAddress($loopback_interface_ip_address)
    {
        if (is_null($loopback_interface_ip_address)) {
            throw new \InvalidArgumentException('non-nullable loopback_interface_ip_address cannot be null');
        }
        $this->container['loopback_interface_ip_address'] = $loopback_interface_ip_address;

        return $this;
    }

    /**
     * Gets loopback_interface_subnet_mask
     *
     * @return string|null
     */
    public function getLoopbackInterfaceSubnetMask()
    {
        return $this->container['loopback_interface_subnet_mask'];
    }

    /**
     * Sets loopback_interface_subnet_mask
     *
     * @param string|null $loopback_interface_subnet_mask Distribution Switch loopback interface subnet mask
     *
     * @return self
     */
    public function setLoopbackInterfaceSubnetMask($loopback_interface_subnet_mask)
    {
        if (is_null($loopback_interface_subnet_mask)) {
            throw new \InvalidArgumentException('non-nullable loopback_interface_subnet_mask cannot be null');
        }
        $this->container['loopback_interface_subnet_mask'] = $loopback_interface_subnet_mask;

        return $this;
    }

    /**
     * Gets site_secondary_list
     *
     * @return object[]|null
     */
    public function getSiteSecondaryList()
    {
        return $this->container['site_secondary_list'];
    }

    /**
     * Sets site_secondary_list
     *
     * @param object[]|null $site_secondary_list site_secondary_list
     *
     * @return self
     */
    public function setSiteSecondaryList($site_secondary_list)
    {
        if (is_null($site_secondary_list)) {
            throw new \InvalidArgumentException('non-nullable site_secondary_list cannot be null');
        }
        $this->container['site_secondary_list'] = $site_secondary_list;

        return $this;
    }

    /**
     * Gets site_keep_alive
     *
     * @return string|null
     */
    public function getSiteKeepAlive()
    {
        return $this->container['site_keep_alive'];
    }

    /**
     * Sets site_keep_alive
     *
     * @param string|null $site_keep_alive VXLAN Site's Keep Alive Timer Value
     *
     * @return self
     */
    public function setSiteKeepAlive($site_keep_alive)
    {
        if (is_null($site_keep_alive)) {
            throw new \InvalidArgumentException('non-nullable site_keep_alive cannot be null');
        }
        $this->container['site_keep_alive'] = $site_keep_alive;

        return $this;
    }

    /**
     * Gets site_retry
     *
     * @return string|null
     */
    public function getSiteRetry()
    {
        return $this->container['site_retry'];
    }

    /**
     * Sets site_retry
     *
     * @param string|null $site_retry VXLAN Site's Keep Alive Retry Value
     *
     * @return self
     */
    public function setSiteRetry($site_retry)
    {
        if (is_null($site_retry)) {
            throw new \InvalidArgumentException('non-nullable site_retry cannot be null');
        }
        $this->container['site_retry'] = $site_retry;

        return $this;
    }

    /**
     * Gets dispatch_message
     *
     * @return string|null
     */
    public function getDispatchMessage()
    {
        return $this->container['dispatch_message'];
    }

    /**
     * Sets dispatch_message
     *
     * @param string|null $dispatch_message Distribution Switch Dispatch Result
     *
     * @return self
     */
    public function setDispatchMessage($dispatch_message)
    {
        if (is_null($dispatch_message)) {
            throw new \InvalidArgumentException('non-nullable dispatch_message cannot be null');
        }
        $this->container['dispatch_message'] = $dispatch_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


