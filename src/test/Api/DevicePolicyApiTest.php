<?php
/**
 * DevicePolicyApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  PofP\SmartzoneClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Virtual SmartZone - High Scale
 *
 * This reference guide describes the public APIs supported by the Virtual SmartZone - High Scale 6.1.1. Use the RESTful API commands described in this guide as an alternative way to manage the controller and its managed APs (in addition to the web and command line interfaces).
 *
 * The version of the OpenAPI document: v11_1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace PofP\SmartzoneClient\Test\Api;

use \PofP\SmartzoneClient\Configuration;
use \PofP\SmartzoneClient\ApiException;
use \PofP\SmartzoneClient\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * DevicePolicyApiTest Class Doc Comment
 *
 * @category Class
 * @package  PofP\SmartzoneClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DevicePolicyApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for addRkszonesDevicePolicyByZoneId
     *
     * Create a new Device Policy Profile (for Firmware Versions less than 5.2)..
     *
     */
    public function testAddRkszonesDevicePolicyByZoneId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteRkszonesDevicePolicyById
     *
     * Delete Device Policy Profile (for Firmware Versions less than 5.2)..
     *
     */
    public function testDeleteRkszonesDevicePolicyById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findRkszonesDevicePolicyById
     *
     * Retrieve a Device Policy Profile (for Firmware Versions less than 5.2)..
     *
     */
    public function testFindRkszonesDevicePolicyById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findRkszonesDevicePolicyByZoneId
     *
     * Retrieve a list of Device Policy Profiles within a zone (for Firmware Versions less than 5.2)..
     *
     */
    public function testFindRkszonesDevicePolicyByZoneId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findServicesDevicePolicyByQueryCriteria
     *
     * Query Device Policy Profiles with specified filters..
     *
     */
    public function testFindServicesDevicePolicyByQueryCriteria()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for partialUpdateRkszonesDevicePolicyById
     *
     * Modify a specific Device Policy Profile (for Firmware Versions less than 5.2)..
     *
     */
    public function testPartialUpdateRkszonesDevicePolicyById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
