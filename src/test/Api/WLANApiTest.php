<?php
/**
 * WLANApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  PofP\SmartzoneClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Virtual SmartZone - High Scale
 *
 * This reference guide describes the public APIs supported by the Virtual SmartZone - High Scale 6.1.1. Use the RESTful API commands described in this guide as an alternative way to manage the controller and its managed APs (in addition to the web and command line interfaces).
 *
 * The version of the OpenAPI document: v11_1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace PofP\SmartzoneClient\Test\Api;

use \PofP\SmartzoneClient\Configuration;
use \PofP\SmartzoneClient\ApiException;
use \PofP\SmartzoneClient\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * WLANApiTest Class Doc Comment
 *
 * @category Class
 * @package  PofP\SmartzoneClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WLANApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for addRkszonesWlansByZoneId
     *
     * Use this API command to create a new standard, open and non-tunneled basic WLAN..
     *
     */
    public function testAddRkszonesWlansByZoneId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addRkszonesWlansGuestByZoneId
     *
     * Use this API command to create a new guest access WLAN..
     *
     */
    public function testAddRkszonesWlansGuestByZoneId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addRkszonesWlansHotspot20ByZoneId
     *
     * Use this API command to create a new Hotspot 2.0 access WLAN..
     *
     */
    public function testAddRkszonesWlansHotspot20ByZoneId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addRkszonesWlansHotspot20openByZoneId
     *
     * Use this API command to create a new Hotspot 2.0 Onboarding WLAN with Authentication Method as 'Open'..
     *
     */
    public function testAddRkszonesWlansHotspot20openByZoneId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addRkszonesWlansHotspot20osenByZoneId
     *
     * Use this API command to create a new Hotspot 2.0 Onboarding WLAN with Authentication Method as '802.1X'..
     *
     */
    public function testAddRkszonesWlansHotspot20osenByZoneId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addRkszonesWlansQosMapsById
     *
     * Use this API command to enable Qos Map Set of a WLAN..
     *
     */
    public function testAddRkszonesWlansQosMapsById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addRkszonesWlansStandard8021XByZoneId
     *
     * Use this API command to create a new standard, 802.1X and non-tunneled WLAN..
     *
     */
    public function testAddRkszonesWlansStandard8021XByZoneId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addRkszonesWlansStandard8021XmacByZoneId
     *
     * Use this API command to create a new standard, 802.1X with MAC address and non-tunneled WLAN..
     *
     */
    public function testAddRkszonesWlansStandard8021XmacByZoneId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addRkszonesWlansStandardmacByZoneId
     *
     * Use this API command to create a new standard, MAC auth and non-tunneled WLAN..
     *
     */
    public function testAddRkszonesWlansStandardmacByZoneId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addRkszonesWlansWebauthByZoneId
     *
     * Use this API command to creates new web authentication WLAN..
     *
     */
    public function testAddRkszonesWlansWebauthByZoneId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addRkszonesWlansWechatByZoneId
     *
     * Use this API command to create a new wechat WLAN..
     *
     */
    public function testAddRkszonesWlansWechatByZoneId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addRkszonesWlansWispr8021XByZoneId
     *
     * Use this API command to create a new hotspot (WISPr) with 802.1X WLAN..
     *
     */
    public function testAddRkszonesWlansWispr8021XByZoneId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addRkszonesWlansWisprByZoneId
     *
     * Use this API command to create new hotspot (WISPr) WLAN..
     *
     */
    public function testAddRkszonesWlansWisprByZoneId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addRkszonesWlansWisprmacByZoneId
     *
     * Use this API command to create a new hotspot (WISPr) with MAC bypass WLAN..
     *
     */
    public function testAddRkszonesWlansWisprmacByZoneId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteRkszonesWlansAccountingServiceOrProfileById
     *
     * Use this API command to disable the accounting of a WLAN..
     *
     */
    public function testDeleteRkszonesWlansAccountingServiceOrProfileById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteRkszonesWlansById
     *
     * Use this API command to delete a WLAN..
     *
     */
    public function testDeleteRkszonesWlansById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteRkszonesWlansDevicePolicyById
     *
     * Use this API command to disable the device policy of a WLAN..
     *
     */
    public function testDeleteRkszonesWlansDevicePolicyById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteRkszonesWlansDiffServProfileById
     *
     * Use this API command to disable the DiffServ profile of a WLAN..
     *
     */
    public function testDeleteRkszonesWlansDiffServProfileById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteRkszonesWlansDnsServerProfileById
     *
     * Use this API command to disable DNS server profile of a WLAN..
     *
     */
    public function testDeleteRkszonesWlansDnsServerProfileById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteRkszonesWlansL2ACLById
     *
     * Use this API command to disable the layer 2 access control list (ACL) configuration of a WLAN..
     *
     */
    public function testDeleteRkszonesWlansL2ACLById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteRkszonesWlansQosMapsById
     *
     * Use this API command to disable Qos Map Set of a WLAN..
     *
     */
    public function testDeleteRkszonesWlansQosMapsById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findRkszonesWlansById
     *
     * Use this API command to retrieve a WLAN..
     *
     */
    public function testFindRkszonesWlansById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findRkszonesWlansByZoneId
     *
     * Use this API command to retrieve a list of WLANs within a zone..
     *
     */
    public function testFindRkszonesWlansByZoneId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for findWlanByQueryCriteria
     *
     * Query WLANs with specified filters..
     *
     */
    public function testFindWlanByQueryCriteria()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for partialUpdateRkszonesWlansById
     *
     * Use this API command to modify the configuration of a WLAN..
     *
     */
    public function testPartialUpdateRkszonesWlansById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateRkszonesWlansById
     *
     * Use this API command to modify entire information of a WLAN..
     *
     */
    public function testUpdateRkszonesWlansById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
